install_pe = false
pe_version = '3.8.0'
#Vagrant.require_plugin "vagrant-windows"

if install_pe
  unless Vagrant.has_plugin?("vagrant-pe_build")
    raise 'vagrant-pe_build is not installed!'
  end
end

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  config.vm.define "master" do |master|
    master.vm.box = "centos-6.5-64-nocm"

    master.vm.provider :virtualbox do |v, override|
      override.vm.network :private_network, ip: "192.168.0.6"
      # Use the host's DNS resolver
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--memory", "2048"]
      v.customize ["modifyvm", :id, "--cpus", "2"]
    end

    master.vm.synced_folder "puppet/master/modules", "/etc/puppet/modules"
    master.vm.synced_folder "puppet/master/manifests", "/etc/puppet/manifests"

    master.vm.provision :shell, :path => "shell/linux/PrepareRHEL6.sh"
    master.vm.provision :shell, :path => "shell/linux/SetPuppetMasterHost.sh"
    master.vm.provision :shell, :inline => 'echo "192.168.0.6  puppet" >> /etc/hosts'

    if !install_pe
      master.vm.provision :shell, :path => "shell/linux/PuppetInstallMaster.sh"
    else
      #PE install - http://docs.puppetlabs.com/pe/latest/install_basic.html
      master.pe_build.version = pe_version
      # if you don't have $PE_DOWNLOAD_ROOT defined,
      # you will want to comment this line out and
      # move to an older version of PE
      master.pe_build.download_root = "#{ENV['PE_DOWNLOAD_ROOT']}/:version"
      master.vm.provision :pe_bootstrap do |provisioner|
        provisioner.role = :master
        provisioner.verbose = true
      end
      master.vm.provision :pe_bootstrap
    end
  end

  # config.vm.define "centos" do |centos|
  #   centos.vm.box = "centos-6.5-64-nocm"

  #   centos.vm.provider :virtualbox do |v, override|
  #     override.vm.network :private_network, ip: "192.168.0.7"
  #     # Use the host's DNS resolver
  #     v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #   end

  #   centos.vm.provision :shell, :path => "shell/linux/PrepareRHEL6.sh"

  #   if !install_pe
  #     centos.vm.provision :shell, :path => "shell/linux/PuppetInstallCentOS.sh"
  #     centos.vm.provision :shell, :inline => 'echo "192.168.0.6  puppet" >> /etc/hosts'
  #  else
  #     centos.pe_build.version = pe_version
  #     # if you don't have $PE_DOWNLOAD_ROOT defined,
  #     # you will want to comment this line out and
  #     # move to an older version of PE
  #     centos.pe_build.download_root = "#{ENV['PE_DOWNLOAD_ROOT']}/:version"
  #     centos.vm.provision :pe_bootstrap do |provisioner|
  #       provisioner.role = :agent
  #       provisioner.verbose = true
  #       provisioner.master = 'puppet'
  #     end
  #     centos.vm.provision :pe_bootstrap
  #   end
  # end

  # config.vm.define "ubuntu" do |ubuntu|
  #   ubuntu.vm.box = "ubuntu-12.04-64-nocm"

  #   ubuntu.vm.provider :virtualbox do |v, override|
  #     override.vm.network :private_network, ip: "192.168.0.8"
  #     # Use the host's DNS resolver
  #     v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #   end

  #   ubuntu.vm.provision :shell, :path => "shell/linux/PrepareUbuntu.sh"
  #   ubuntu.vm.provision :shell, :path => "shell/linux/PuppetInstallUbuntu.sh"
  #   ubuntu.vm.provision :shell, :inline => 'echo "192.168.0.6  puppet" >> /etc/hosts'
  # end

  config.vm.define "win2012" do |win2012|
    # Every Vagrant virtual environment requires a box to build off of.
    win2012.vm.box = "win2012r2x64"
   # Max time to wait for the guest to shutdown
    win2012.windows.halt_timeout = 20
    # Admin user name and password
    win2012.winrm.username = "vagrant"
    win2012.winrm.password = "vagrant"
    # Configure base box parameters
    win2012.vm.guest = :windows
    if Vagrant::VERSION >= '1.6.0'
      win2012.vm.communicator = "winrm"
    end

    # Port forward WinRM
    win2012.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
    # Port forward SSH (ssh is forwarded by default in most versions of Vagrant, but be sure)
    # It's not necessary if you are not using SSH, but it doesn't hurt anything to have it
    win2012.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true

    win2012.vm.synced_folder "../shared", "/vagrantshared"
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    win2012.vm.provider :virtualbox do |v, override|
      override.vm.network :private_network, ip: "192.168.0.12"
      # Don't boot with headless mode
      v.gui = true
      # Use the host's DNS resolver
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      # Optimize settings
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      v.customize ["modifyvm", :id, "--usb", "off"]
      # Adjust the memory
      #v.customize ["modifyvm", :id, "--memory", "1024"]
    end

    if !install_pe
      win2012.vm.provision :shell, :path => "../shared/shell/PrepareWindows.ps1"
      win2012.vm.provision :shell, :path => "../shared/shell/InstallPuppetFromMSI.ps1"
      win2012.vm.provision :shell, :path => "../shared/shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
    else
      win2012.vm.provision :shell, :path => "../shared/shell/PrepareWindows.ps1"
      #PE install
      win2012.pe_build.version = pe_version
      # if you don't have $PE_DOWNLOAD_ROOT defined,
      # you will want to comment this line out and
      # move to an older version of PE
      win2012.pe_build.download_root = "#{ENV['PE_DOWNLOAD_ROOT']}/:version"
      win2012.vm.provision :pe_bootstrap do |provisioner|
        provisioner.role = :agent
        provisioner.verbose = true
        provisioner.master = 'puppet'
      end
      win2012.vm.provision :pe_bootstrap
      win2012.vm.provision :shell, :path => "../shared/shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
    end

    win2012.vm.provision :shell, :path => "shell/windows/SmokeCommands.ps1"
  end

  config.vm.define "win2008" do |win2008|
    # Every Vagrant virtual environment requires a box to build off of.
    win2008.vm.box = "win2008r2x64"
   # Max time to wait for the guest to shutdown
    win2008.windows.halt_timeout = 20
    # Admin user name and password
    win2008.winrm.username = "vagrant"
    win2008.winrm.password = "vagrant"
    # Configure base box parameters
    win2008.vm.guest = :windows
    if Vagrant::VERSION >= '1.6.0'
      win2008.vm.communicator = "winrm"
    end

    # Port forward WinRM
    win2008.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
    # Port forward SSH (ssh is forwarded by default in most versions of Vagrant, but be sure)
    # It's not necessary if you are not using SSH, but it doesn't hurt anything to have it
    win2008.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true

    win2008.vm.synced_folder "../shared", "/vagrantshared"
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    win2008.vm.provider :virtualbox do |v, override|
      override.vm.network :private_network, ip: "192.168.0.12"
      # Don't boot with headless mode
      v.gui = true
      # Use the host's DNS resolver
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      # Optimize settings
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      v.customize ["modifyvm", :id, "--usb", "off"]
      # Adjust the memory
      v.customize ["modifyvm", :id, "--memory", "1024"]
    end

    if !install_pe
      win2008.vm.provision :shell, :path => "../shared/shell/PrepareWindows.ps1"
      win2008.vm.provision :shell, :path => "../shared/shell/InstallPuppetFromMSI.ps1"
      win2008.vm.provision :shell, :path => "../shared/shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
    else
      win2008.vm.provision :shell, :path => "../shared/shell/PrepareWindows.ps1"
      #PE install
      win2008.pe_build.version = pe_version
      # if you don't have $PE_DOWNLOAD_ROOT defined,
      # you will want to comment this line out and
      # move to an older version of PE
      win2008.pe_build.download_root = "#{ENV['PE_DOWNLOAD_ROOT']}/:version"
      win2008.vm.provision :pe_bootstrap do |provisioner|
        provisioner.role = :agent
        provisioner.verbose = true
        provisioner.master = 'puppet'
      end
      win2008.vm.provision :pe_bootstrap
      win2008.vm.provision :shell, :path => "../shared/shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
    end

    win2008.vm.provision :shell, :path => "shell/windows/SmokeCommands.ps1"
  end

  config.vm.define "win2003" do |win2003|
    # Every Vagrant virtual environment requires a box to build off of.
    win2003.vm.box = "win2003x86"
   # Max time to wait for the guest to shutdown
    win2003.windows.halt_timeout = 20
    # Admin user name and password
    win2003.winrm.username = "vagrant"
    win2003.winrm.password = "vagrant"
    # Configure base box parameters
    win2003.vm.guest = :windows
    if Vagrant::VERSION >= '1.6.0'
      win2003.vm.communicator = "winrm"
    end
    # Port forward WinRM
    win2003.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
    # Port forward SSH (ssh is forwarded by default in most versions of Vagrant, but be sure)
    # It's not necessary if you are not using SSH, but it doesn't hurt anything to have it
    win2003.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true

    win2003.vm.synced_folder "../shared", "/vagrantshared"
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    win2003.vm.provider :virtualbox do |v, override|
      override.vm.network :private_network, ip: "192.168.0.12"
      # Don't boot with headless mode
      v.gui = true
      # Use the host's DNS resolver
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      # Optimize settings
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      v.customize ["modifyvm", :id, "--usb", "off"]
      # Adjust the memory
      v.customize ["modifyvm", :id, "--memory", "1024"]
    end

    if !install_pe
      win2003.vm.provision :shell, :path => "../shared/shell/PrepareWindows.ps1"
      win2003.vm.provision :shell, :path => "../shared/shell/InstallPuppetFromMSI.ps1"
      win2003.vm.provision :shell, :path => "../shared/shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
    else
      win2003.vm.provision :shell, :path => '../shared/shell/PrepareWindows.ps1'
      #PE install
      win2003.pe_build.version = pe_version
      # if you don't have $PE_DOWNLOAD_ROOT defined,
      # you will want to comment this line out and
      # move to an older version of PE
      win2003.pe_build.download_root = "#{ENV['PE_DOWNLOAD_ROOT']}/:version"
      win2003.vm.provision :pe_bootstrap do |provisioner|
        provisioner.role = :agent
        provisioner.verbose = true
        provisioner.master = 'puppet'
      end
      win2003.vm.provision :pe_bootstrap
      win2003.vm.provision :shell, :path => "../shared/shell/NotifyGuiAppsOfEnvironmentChanges.ps1"
    end

    win2003.vm.provision :shell, :path => "shell/windows/SmokeCommands.ps1"
  end
end
